crt:= function(a,n)
      s:=[];
      t:=[];
      if #a ne #n then
         printf "length of a not equal to length of n";
         quit;
         end if;
      for x in n do
          for y in n do
              if x ne y then
                  if GCD(x,y) ne 1 then
                      quit;
                  end if;
              end if;
          end for;
      end for;
      npro:=1;
      for x in n do
          npro:=x*npro;
      end for;
      i:=1;
      for x in n do
          s[i]:=npro div x;
          i:=i+1;
      end for;
      i:=1;
      for x in n do
          t[i]:=Modinv(s[i],n[i]);
          i:=i+1;
      end for;
      z:=0;
      i:=1;
      for x in n do
          z:=z+s[i]*t[i]*a[i];
          i:=i+1;
      end for;
      return z mod npro;
end function;

findhm:= function(p)
      for h in [1 .. 100000] do
          for m in [1 .. 100000] do
              if (p-1) eq (2^h)*m then
                 if IsOdd(m) then
                    return <h,m>;
                 end if;
              end if;
          end for;
      end for;
      return <0,0>;
end function;

squareroot:= function(a,p,f)
	if ((a^((p-1)div 2)) mod p) eq 1 then
	   t:=findhm(p);
	   h:=t[1];
	   if h eq 1 then
		  return a^((p+1)div 4) mod p;
	   end if;
	   m:=t[2];
	   repeat
		     gama:=Random(2,p-1);
	   until ((gama^((p-1)div 2)) mod p) eq p-1;
	   a1:=a^m mod p;
	   c:=gama^m mod p;
	   r:=a^(Floor((m+1)/2)) mod p;
	   m:=h;
	   i:=0;
	   if a1 ne 1 then
		   repeat
           i:=i+1;
		   until a1^(2^i) mod p eq 1;
	   	   b1:=2^(m-i-1);
	   	   b:=c^b1  mod p;
	   	   r:= r*b mod p;
	   end if;
	   b:=(a-r^2) mod p^(f+1);
	   a:=2*r*p^f;
	   n:=p^(f+1);
	   d:=GCD(a,n);
	   if b mod d ne 0 then
		  "no solution";
		  return 0;
		  exit;
	   else
		   a1:=a div d;
		   b1:=b div d;
		   n1:=n div d;
		   t:=Modinv(a1,n1);
		   h:=t*b1 mod n1;
	   end if;
	   c:=r+h*p^f;
	   return c;
	end if;
	return 0;
end function;

a:=2201;
p:=4127;
b:=Factorization(p);
S:=[];
W:=[];
for i in [1..#b] do
    t:=b[i];
    if (t[1] mod 2) eq 1 then
      x:=squareroot(a,t[1],t[2]-1);
      W:=Append(W,(t[1])^(t[2]));
      S:=Append(S, x);
    else
        quit;
    end if;
end for;
sonuc:=crt(S,W);
sonuc;
a eq sonuc^2 mod p;